import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
// import 'field_buttons_page.dart';
import 'splash_screen.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // this was auto-generated by flutterfire

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Makes sure binding is ready before Firebase loads
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // ── hold the native splash for 1 extra second ──
  await Future.delayed(const Duration(seconds: 1));

  runApp(const FAIAssistantApp());
}

class FAIAssistantApp extends StatelessWidget {
  const FAIAssistantApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'FAI Assistant',
      theme: ThemeData(
        primarySwatch: Colors.indigo,
      ),
      home: const SplashScreen(),
      routes: {
        '/home': (context) => const StartupHomePage(),
        // '/formFields': (context) => const FieldButtonsPage(),
      },
    );
  }
}

class StartupHomePage extends StatefulWidget {
  const StartupHomePage({super.key});

  @override
  State<StartupHomePage> createState() => _StartupHomePageState();
}

class _StartupHomePageState extends State<StartupHomePage> {
  bool hasLoadedAS9102 = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('FAI Assistant')),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          ElevatedButton(
            onPressed: () async {
              if (hasLoadedAS9102) {
                openAS9102(context);
              } else {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (navContext) => AS9102InstructionsPageDemo(
                      onFileLoaded: () {
                        setState(() {
                          hasLoadedAS9102 = true;
                        });
                      },
                    ),
                  ),
                );
              }
            },
            child: Text(hasLoadedAS9102 ? 'AS9102' : 'Purchase AS9102'),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () {
              Navigator.pushNamed(context, '/formFields');
            },
            child: const Text('Go to Form Fields'),
          ),
        ],
      ),
    );
  }
}

class AS9102InstructionsPageDemo extends StatefulWidget {
  final VoidCallback onFileLoaded;
  const AS9102InstructionsPageDemo({super.key, required this.onFileLoaded});

  @override
  State<AS9102InstructionsPageDemo> createState() => _AS9102InstructionsPageDemoState();
}

class _AS9102InstructionsPageDemoState extends State<AS9102InstructionsPageDemo> {
  String? errorMessage;

  Future<File?> getAS9102File() async {
    final dir = await getApplicationDocumentsDirectory();
    final file = File('${dir.path}/as9102.pdf');
    return await file.exists() ? file : null;
  }

  void retrieveAS9102() async {
    final file = await getAS9102File();
    if (file != null) {
      widget.onFileLoaded();
      Navigator.pop(context);
      openAS9102(context);
    } else {
      setState(() {
        errorMessage = 'AS9102.pdf not found. Make sure it is saved correctly.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final isLandscape = MediaQuery.of(context).orientation == Orientation.landscape;

    return Scaffold(
      appBar: AppBar(title: const Text('Access AS9102')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: isLandscape
            ? Center(child: _buildContent())
            : Column(crossAxisAlignment: CrossAxisAlignment.start, children: [_buildContent()]),
      ),
    );
  }

  Widget _buildContent() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        const Text(
          'To access AS9102:\n\n'
              '1. Purchase the spec from SAE.org\n\n'
              '2. Save the file as "as9102.pdf" in Documents\n\n'
              '3. Tap the button to load it.',
          style: TextStyle(fontSize: 16),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 20),
        ElevatedButton(
          onPressed: retrieveAS9102,
          child: const Text('Retrieve AS9102'),
        ),
        if (errorMessage != null)
          Padding(
            padding: const EdgeInsets.only(top: 12),
            child: Text(errorMessage!, style: const TextStyle(color: Colors.red)),
          ),
      ],
    );
  }
}

void openAS9102(BuildContext context) async {
  try {
    final dir = await getApplicationDocumentsDirectory();
    final file = File('${dir.path}/as9102.pdf');

    if (await file.exists()) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (viewerContext) => AS9102ViewerPlaceholder(filePath: file.path),
        ),
      );
    } else {
      showDialog(
        context: context,
        builder: (dialogContext) => AlertDialog(
          title: const Text('File Not Found'),
          content: const Text('AS9102.pdf not found in your Documents folder.'),
          actions: [
            TextButton(onPressed: () => Navigator.pop(dialogContext), child: const Text('OK')),
          ],
        ),
      );
    }
  } catch (e) {
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('Error'),
        content: Text('An unexpected error occurred:\n$e'),
        actions: [
          TextButton(onPressed: () => Navigator.pop(dialogContext), child: const Text('OK')),
        ],
      ),
    );
  }
}

class AS9102ViewerPlaceholder extends StatelessWidget {
  final String filePath;
  const AS9102ViewerPlaceholder({super.key, required this.filePath});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('AS9102 Viewer')),
      body: Center(
        child: Text(
          'PDF file located at:\n$filePath',
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}